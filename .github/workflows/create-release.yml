name: Create Release
on:
  push:
    branches:
      - main

permissions:
  contents: read # for checkout

jobs:
  next_version:
    runs-on: ubuntu-latest
    outputs:
      next_version: ${{ steps.next_version.outputs.tag }}
    permissions:
      contents: write # to be able to publish a GitHub release
      issues: write # to be able to comment on released issues
      pull-requests: write # to be able to comment on released pull requests
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "lts/*"
      - name: Install dependencies
        run: npm clean-install
      - name: Next Version
        id: next_version
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: echo "tag=v$(npx semantic-release  --branches main --no-ci --dry-run 2>1 | grep -oEi 'The next release version is [1234567890\.]+' | grep -oE '[1234567890\.]+')" >> $GITHUB_OUTPUT
  create_release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: [next_version]
    if: success()
    permissions:
      contents: write # to be able to publish a GitHub release
      issues: write # to be able to comment on released issues
      pull-requests: write # to be able to comment on released pull requests
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "lts/*"
      - name: Install dependencies
        run: npm clean-install
      - name: Release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: npx semantic-release
  get_release:
    runs-on: ubuntu-latest
    needs: ["next_version", "create_release"]
    if: success()
    outputs:
      release_id: ${{ steps.get_release_id.outputs.result }}
    steps:
      - name: Get Release Id
        id: get_release_id
        uses: actions/github-script@v6
        env:
          TAG: ${{ needs.next_version.outputs.next_version }}
        with:
          script: |
            const { data } = await github.rest.repos.getReleaseByTag({
              owner: context.repo.owner,
              repo: context.repo.repo,
              tag: process.env.TAG
            })
            return data.id
  build-tauri:
    needs: [next_version, create_release, get_release]
    if: success()
    permissions:
      contents: write
    strategy:
      fail-fast: false
      matrix:
        include:
          - platform: "macos-latest" # for Arm based macs (M1 and above).
            args: "--target aarch64-apple-darwin"
          - platform: "macos-latest" # for Intel based macs.
            args: "--target x86_64-apple-darwin"
          - platform: "ubuntu-22.04" # for Tauri v1 you could replace this with ubuntu-20.04.
            args: ""
          - platform: "windows-latest"
            args: ""

    runs-on: ${{ matrix.platform }}
    steps:
      - uses: actions/checkout@v4

      - name: setup node
        uses: actions/setup-node@v4
        with:
          node-version: lts/*

      - name: install Rust stable
        uses: dtolnay/rust-toolchain@stable
        with:
          # Those targets are only used on macos runners so it's in an `if` to slightly speed up windows and linux builds.
          targets: ${{ matrix.platform == 'macos-latest' && 'aarch64-apple-darwin,x86_64-apple-darwin' || '' }}

      - name: install dependencies (ubuntu only)
        if: matrix.platform == 'ubuntu-22.04' # This must match the platform value defined above.
        run: |
          sudo apt-get update
          sudo apt-get install -y libwebkit2gtk-4.0-dev libwebkit2gtk-4.1-dev libappindicator3-dev librsvg2-dev patchelf libcups2-dev
        # webkitgtk 4.0 is for Tauri v1 - webkitgtk 4.1 is for Tauri v2.
        # You can remove the one that doesn't apply to your app to speed up the workflow a bit.

      - name: install cargo deps
        working-directory: src-tauri
        run: |
          cargo check || true

      - name: clone required fonts
        if: matrix.platform == 'windows-latest'
        uses: actions/checkout@v5
        with:
          repository: ArtifexSoftware/mupdf
          path: mupdf-sys
          sparse-checkout: |
            resources/fonts

      - name: move fonts to cargo src
        if: matrix.platform == 'windows-latest'
        shell: bash
        run: |
          mupdf_path=$(find $CARGO_HOME -type d -name '*mupdf-sys-*')
          echo $mupdf_path
          cp -R mupdf-sys/resources/fonts $mupdf_path/mupdf/resources/
          ls -lR $mupdf_path/mupdf

      - name: install frontend dependencies
        run: npm install

      - name: update package.json
        shell: bash
        env:
          TAG: ${{ needs.next_version.outputs.next_version }}
        run: npm run bump-version $TAG

      - uses: tauri-apps/tauri-action@v0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          releaseId: ${{ needs.get_release.outputs.release_id }}
          args: ${{ matrix.args }}
